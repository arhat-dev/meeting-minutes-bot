package publisher

import (
	"fmt"

	"arhat.dev/mbot/pkg/rt"
)

type Config interface {
	// Create a publisher base on this config
	Create() (Interface, User, error)
}

type Feature uint32

const (
	Feature_Login  Feature = 1 << iota // needs login
	Feature_SignUp                     // needs sign up
	Feature_Edit                       // supports editing
	Feature_List                       // supports listing content generated by user
	Feature_Delete                     // supports deleting
)

// TODO: rename methods and redesign workflow
type Interface interface {
	// CreateNew creates a new published item
	//
	// this method is called on BotCmd_Discuss
	//
	// examples:
	//   for blog publishers, a new blog post (draft) is supposed to be created after this call
	CreateNew(con rt.Conversation, cmd, params string, in *rt.GeneratorOutput) (out rt.PublisherOutput, err error)

	// Retrieve post and cache it locally according to the url
	//
	// this method is called on BotCmd_Continue
	//
	// examples:
	//   for blog publishers, cache blog post locally
	Retrieve(con rt.Conversation, cmd, params string) (out rt.PublisherOutput, err error)

	// AppendToExisting appends generated content to existing published item
	//
	// this method is called on BotCmd_End
	//
	// examples:
	//   for blog publishers, append generated content to the existing blog post
	AppendToExisting(con rt.Conversation, cmd, params string, in *rt.GeneratorOutput) (out rt.PublisherOutput, err error)

	// RequireLogin returns true when the publisher requires login, if false, there will be no login process presented to user
	//
	// this method is called on BotCmd_Discuss, BotCmd_Continue, BotCmd_List, BotCmd_Delete
	RequireLogin(con rt.Conversation, cmd, params string) (rt.LoginFlow, error)

	// Login as user of the publisher
	Login(con rt.Conversation, user User) (out rt.PublisherOutput, err error)

	// RequestExternalAccess returns a clickable url for external authorization
	RequestExternalAccess(con rt.Conversation) (out rt.PublisherOutput, err error)

	// List all posts for this user
	List(con rt.Conversation) (out rt.PublisherOutput, err error)

	// Delete one post according to the url
	Delete(con rt.Conversation, cmd, params string) (out rt.PublisherOutput, err error)
}

type User interface {
	SetUsername(string)
	SetPassword(string)
	SetTOTPCode(string)
	SetToken(string)
}

type configFactoryFunc = func() Config

var (
	drivers = map[string]configFactoryFunc{}
)

func Register(name string, cf configFactoryFunc) {
	// reserve empty name
	if name == "" {
		return
	}

	drivers[name] = cf
}

func NewConfig(name string) (interface{}, error) {
	cf, ok := drivers[name]
	if !ok {
		return nil, fmt.Errorf("unknown publisher driver %q", name)
	}

	return cf(), nil
}
