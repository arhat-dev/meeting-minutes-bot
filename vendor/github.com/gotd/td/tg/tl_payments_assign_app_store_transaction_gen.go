// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsAssignAppStoreTransactionRequest represents TL type `payments.assignAppStoreTransaction#fec13c6`.
//
// See https://core.telegram.org/method/payments.assignAppStoreTransaction for reference.
type PaymentsAssignAppStoreTransactionRequest struct {
	// Flags field of PaymentsAssignAppStoreTransactionRequest.
	Flags bin.Fields
	// Restore field of PaymentsAssignAppStoreTransactionRequest.
	Restore bool
	// TransactionID field of PaymentsAssignAppStoreTransactionRequest.
	TransactionID string
	// Receipt field of PaymentsAssignAppStoreTransactionRequest.
	Receipt []byte
}

// PaymentsAssignAppStoreTransactionRequestTypeID is TL type id of PaymentsAssignAppStoreTransactionRequest.
const PaymentsAssignAppStoreTransactionRequestTypeID = 0xfec13c6

// Ensuring interfaces in compile-time for PaymentsAssignAppStoreTransactionRequest.
var (
	_ bin.Encoder     = &PaymentsAssignAppStoreTransactionRequest{}
	_ bin.Decoder     = &PaymentsAssignAppStoreTransactionRequest{}
	_ bin.BareEncoder = &PaymentsAssignAppStoreTransactionRequest{}
	_ bin.BareDecoder = &PaymentsAssignAppStoreTransactionRequest{}
)

func (a *PaymentsAssignAppStoreTransactionRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.Flags.Zero()) {
		return false
	}
	if !(a.Restore == false) {
		return false
	}
	if !(a.TransactionID == "") {
		return false
	}
	if !(a.Receipt == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *PaymentsAssignAppStoreTransactionRequest) String() string {
	if a == nil {
		return "PaymentsAssignAppStoreTransactionRequest(nil)"
	}
	type Alias PaymentsAssignAppStoreTransactionRequest
	return fmt.Sprintf("PaymentsAssignAppStoreTransactionRequest%+v", Alias(*a))
}

// FillFrom fills PaymentsAssignAppStoreTransactionRequest from given interface.
func (a *PaymentsAssignAppStoreTransactionRequest) FillFrom(from interface {
	GetRestore() (value bool)
	GetTransactionID() (value string)
	GetReceipt() (value []byte)
}) {
	a.Restore = from.GetRestore()
	a.TransactionID = from.GetTransactionID()
	a.Receipt = from.GetReceipt()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsAssignAppStoreTransactionRequest) TypeID() uint32 {
	return PaymentsAssignAppStoreTransactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsAssignAppStoreTransactionRequest) TypeName() string {
	return "payments.assignAppStoreTransaction"
}

// TypeInfo returns info about TL type.
func (a *PaymentsAssignAppStoreTransactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.assignAppStoreTransaction",
		ID:   PaymentsAssignAppStoreTransactionRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Restore",
			SchemaName: "restore",
			Null:       !a.Flags.Has(0),
		},
		{
			Name:       "TransactionID",
			SchemaName: "transaction_id",
		},
		{
			Name:       "Receipt",
			SchemaName: "receipt",
		},
	}
	return typ
}

// SetFlags sets flags for non-zero fields.
func (a *PaymentsAssignAppStoreTransactionRequest) SetFlags() {
	if !(a.Restore == false) {
		a.Flags.Set(0)
	}
}

// Encode implements bin.Encoder.
func (a *PaymentsAssignAppStoreTransactionRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode payments.assignAppStoreTransaction#fec13c6 as nil")
	}
	b.PutID(PaymentsAssignAppStoreTransactionRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *PaymentsAssignAppStoreTransactionRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode payments.assignAppStoreTransaction#fec13c6 as nil")
	}
	a.SetFlags()
	if err := a.Flags.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.assignAppStoreTransaction#fec13c6: field flags: %w", err)
	}
	b.PutString(a.TransactionID)
	b.PutBytes(a.Receipt)
	return nil
}

// Decode implements bin.Decoder.
func (a *PaymentsAssignAppStoreTransactionRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode payments.assignAppStoreTransaction#fec13c6 to nil")
	}
	if err := b.ConsumeID(PaymentsAssignAppStoreTransactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.assignAppStoreTransaction#fec13c6: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *PaymentsAssignAppStoreTransactionRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode payments.assignAppStoreTransaction#fec13c6 to nil")
	}
	{
		if err := a.Flags.Decode(b); err != nil {
			return fmt.Errorf("unable to decode payments.assignAppStoreTransaction#fec13c6: field flags: %w", err)
		}
	}
	a.Restore = a.Flags.Has(0)
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.assignAppStoreTransaction#fec13c6: field transaction_id: %w", err)
		}
		a.TransactionID = value
	}
	{
		value, err := b.Bytes()
		if err != nil {
			return fmt.Errorf("unable to decode payments.assignAppStoreTransaction#fec13c6: field receipt: %w", err)
		}
		a.Receipt = value
	}
	return nil
}

// SetRestore sets value of Restore conditional field.
func (a *PaymentsAssignAppStoreTransactionRequest) SetRestore(value bool) {
	if value {
		a.Flags.Set(0)
		a.Restore = true
	} else {
		a.Flags.Unset(0)
		a.Restore = false
	}
}

// GetRestore returns value of Restore conditional field.
func (a *PaymentsAssignAppStoreTransactionRequest) GetRestore() (value bool) {
	if a == nil {
		return
	}
	return a.Flags.Has(0)
}

// GetTransactionID returns value of TransactionID field.
func (a *PaymentsAssignAppStoreTransactionRequest) GetTransactionID() (value string) {
	if a == nil {
		return
	}
	return a.TransactionID
}

// GetReceipt returns value of Receipt field.
func (a *PaymentsAssignAppStoreTransactionRequest) GetReceipt() (value []byte) {
	if a == nil {
		return
	}
	return a.Receipt
}

// PaymentsAssignAppStoreTransaction invokes method payments.assignAppStoreTransaction#fec13c6 returning error if any.
//
// See https://core.telegram.org/method/payments.assignAppStoreTransaction for reference.
func (c *Client) PaymentsAssignAppStoreTransaction(ctx context.Context, request *PaymentsAssignAppStoreTransactionRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
