// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsAssignPlayMarketTransactionRequest represents TL type `payments.assignPlayMarketTransaction#4faa4aed`.
//
// See https://core.telegram.org/method/payments.assignPlayMarketTransaction for reference.
type PaymentsAssignPlayMarketTransactionRequest struct {
	// PurchaseToken field of PaymentsAssignPlayMarketTransactionRequest.
	PurchaseToken string
}

// PaymentsAssignPlayMarketTransactionRequestTypeID is TL type id of PaymentsAssignPlayMarketTransactionRequest.
const PaymentsAssignPlayMarketTransactionRequestTypeID = 0x4faa4aed

// Ensuring interfaces in compile-time for PaymentsAssignPlayMarketTransactionRequest.
var (
	_ bin.Encoder     = &PaymentsAssignPlayMarketTransactionRequest{}
	_ bin.Decoder     = &PaymentsAssignPlayMarketTransactionRequest{}
	_ bin.BareEncoder = &PaymentsAssignPlayMarketTransactionRequest{}
	_ bin.BareDecoder = &PaymentsAssignPlayMarketTransactionRequest{}
)

func (a *PaymentsAssignPlayMarketTransactionRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.PurchaseToken == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *PaymentsAssignPlayMarketTransactionRequest) String() string {
	if a == nil {
		return "PaymentsAssignPlayMarketTransactionRequest(nil)"
	}
	type Alias PaymentsAssignPlayMarketTransactionRequest
	return fmt.Sprintf("PaymentsAssignPlayMarketTransactionRequest%+v", Alias(*a))
}

// FillFrom fills PaymentsAssignPlayMarketTransactionRequest from given interface.
func (a *PaymentsAssignPlayMarketTransactionRequest) FillFrom(from interface {
	GetPurchaseToken() (value string)
}) {
	a.PurchaseToken = from.GetPurchaseToken()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsAssignPlayMarketTransactionRequest) TypeID() uint32 {
	return PaymentsAssignPlayMarketTransactionRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsAssignPlayMarketTransactionRequest) TypeName() string {
	return "payments.assignPlayMarketTransaction"
}

// TypeInfo returns info about TL type.
func (a *PaymentsAssignPlayMarketTransactionRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.assignPlayMarketTransaction",
		ID:   PaymentsAssignPlayMarketTransactionRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "PurchaseToken",
			SchemaName: "purchase_token",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *PaymentsAssignPlayMarketTransactionRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode payments.assignPlayMarketTransaction#4faa4aed as nil")
	}
	b.PutID(PaymentsAssignPlayMarketTransactionRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *PaymentsAssignPlayMarketTransactionRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode payments.assignPlayMarketTransaction#4faa4aed as nil")
	}
	b.PutString(a.PurchaseToken)
	return nil
}

// Decode implements bin.Decoder.
func (a *PaymentsAssignPlayMarketTransactionRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode payments.assignPlayMarketTransaction#4faa4aed to nil")
	}
	if err := b.ConsumeID(PaymentsAssignPlayMarketTransactionRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.assignPlayMarketTransaction#4faa4aed: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *PaymentsAssignPlayMarketTransactionRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode payments.assignPlayMarketTransaction#4faa4aed to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.assignPlayMarketTransaction#4faa4aed: field purchase_token: %w", err)
		}
		a.PurchaseToken = value
	}
	return nil
}

// GetPurchaseToken returns value of PurchaseToken field.
func (a *PaymentsAssignPlayMarketTransactionRequest) GetPurchaseToken() (value string) {
	if a == nil {
		return
	}
	return a.PurchaseToken
}

// PaymentsAssignPlayMarketTransaction invokes method payments.assignPlayMarketTransaction#4faa4aed returning error if any.
//
// See https://core.telegram.org/method/payments.assignPlayMarketTransaction for reference.
func (c *Client) PaymentsAssignPlayMarketTransaction(ctx context.Context, purchasetoken string) (UpdatesClass, error) {
	var result UpdatesBox

	request := &PaymentsAssignPlayMarketTransactionRequest{
		PurchaseToken: purchasetoken,
	}
	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
