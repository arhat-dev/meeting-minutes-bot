// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PaymentsRequestRecurringPaymentRequest represents TL type `payments.requestRecurringPayment#146e958d`.
//
// See https://core.telegram.org/method/payments.requestRecurringPayment for reference.
type PaymentsRequestRecurringPaymentRequest struct {
	// UserID field of PaymentsRequestRecurringPaymentRequest.
	UserID InputUserClass
	// RecurringInitCharge field of PaymentsRequestRecurringPaymentRequest.
	RecurringInitCharge string
	// InvoiceMedia field of PaymentsRequestRecurringPaymentRequest.
	InvoiceMedia InputMediaClass
}

// PaymentsRequestRecurringPaymentRequestTypeID is TL type id of PaymentsRequestRecurringPaymentRequest.
const PaymentsRequestRecurringPaymentRequestTypeID = 0x146e958d

// Ensuring interfaces in compile-time for PaymentsRequestRecurringPaymentRequest.
var (
	_ bin.Encoder     = &PaymentsRequestRecurringPaymentRequest{}
	_ bin.Decoder     = &PaymentsRequestRecurringPaymentRequest{}
	_ bin.BareEncoder = &PaymentsRequestRecurringPaymentRequest{}
	_ bin.BareDecoder = &PaymentsRequestRecurringPaymentRequest{}
)

func (r *PaymentsRequestRecurringPaymentRequest) Zero() bool {
	if r == nil {
		return true
	}
	if !(r.UserID == nil) {
		return false
	}
	if !(r.RecurringInitCharge == "") {
		return false
	}
	if !(r.InvoiceMedia == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (r *PaymentsRequestRecurringPaymentRequest) String() string {
	if r == nil {
		return "PaymentsRequestRecurringPaymentRequest(nil)"
	}
	type Alias PaymentsRequestRecurringPaymentRequest
	return fmt.Sprintf("PaymentsRequestRecurringPaymentRequest%+v", Alias(*r))
}

// FillFrom fills PaymentsRequestRecurringPaymentRequest from given interface.
func (r *PaymentsRequestRecurringPaymentRequest) FillFrom(from interface {
	GetUserID() (value InputUserClass)
	GetRecurringInitCharge() (value string)
	GetInvoiceMedia() (value InputMediaClass)
}) {
	r.UserID = from.GetUserID()
	r.RecurringInitCharge = from.GetRecurringInitCharge()
	r.InvoiceMedia = from.GetInvoiceMedia()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PaymentsRequestRecurringPaymentRequest) TypeID() uint32 {
	return PaymentsRequestRecurringPaymentRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PaymentsRequestRecurringPaymentRequest) TypeName() string {
	return "payments.requestRecurringPayment"
}

// TypeInfo returns info about TL type.
func (r *PaymentsRequestRecurringPaymentRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "payments.requestRecurringPayment",
		ID:   PaymentsRequestRecurringPaymentRequestTypeID,
	}
	if r == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "RecurringInitCharge",
			SchemaName: "recurring_init_charge",
		},
		{
			Name:       "InvoiceMedia",
			SchemaName: "invoice_media",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (r *PaymentsRequestRecurringPaymentRequest) Encode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode payments.requestRecurringPayment#146e958d as nil")
	}
	b.PutID(PaymentsRequestRecurringPaymentRequestTypeID)
	return r.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (r *PaymentsRequestRecurringPaymentRequest) EncodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't encode payments.requestRecurringPayment#146e958d as nil")
	}
	if r.UserID == nil {
		return fmt.Errorf("unable to encode payments.requestRecurringPayment#146e958d: field user_id is nil")
	}
	if err := r.UserID.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.requestRecurringPayment#146e958d: field user_id: %w", err)
	}
	b.PutString(r.RecurringInitCharge)
	if r.InvoiceMedia == nil {
		return fmt.Errorf("unable to encode payments.requestRecurringPayment#146e958d: field invoice_media is nil")
	}
	if err := r.InvoiceMedia.Encode(b); err != nil {
		return fmt.Errorf("unable to encode payments.requestRecurringPayment#146e958d: field invoice_media: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (r *PaymentsRequestRecurringPaymentRequest) Decode(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode payments.requestRecurringPayment#146e958d to nil")
	}
	if err := b.ConsumeID(PaymentsRequestRecurringPaymentRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode payments.requestRecurringPayment#146e958d: %w", err)
	}
	return r.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (r *PaymentsRequestRecurringPaymentRequest) DecodeBare(b *bin.Buffer) error {
	if r == nil {
		return fmt.Errorf("can't decode payments.requestRecurringPayment#146e958d to nil")
	}
	{
		value, err := DecodeInputUser(b)
		if err != nil {
			return fmt.Errorf("unable to decode payments.requestRecurringPayment#146e958d: field user_id: %w", err)
		}
		r.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode payments.requestRecurringPayment#146e958d: field recurring_init_charge: %w", err)
		}
		r.RecurringInitCharge = value
	}
	{
		value, err := DecodeInputMedia(b)
		if err != nil {
			return fmt.Errorf("unable to decode payments.requestRecurringPayment#146e958d: field invoice_media: %w", err)
		}
		r.InvoiceMedia = value
	}
	return nil
}

// GetUserID returns value of UserID field.
func (r *PaymentsRequestRecurringPaymentRequest) GetUserID() (value InputUserClass) {
	if r == nil {
		return
	}
	return r.UserID
}

// GetRecurringInitCharge returns value of RecurringInitCharge field.
func (r *PaymentsRequestRecurringPaymentRequest) GetRecurringInitCharge() (value string) {
	if r == nil {
		return
	}
	return r.RecurringInitCharge
}

// GetInvoiceMedia returns value of InvoiceMedia field.
func (r *PaymentsRequestRecurringPaymentRequest) GetInvoiceMedia() (value InputMediaClass) {
	if r == nil {
		return
	}
	return r.InvoiceMedia
}

// PaymentsRequestRecurringPayment invokes method payments.requestRecurringPayment#146e958d returning error if any.
//
// See https://core.telegram.org/method/payments.requestRecurringPayment for reference.
func (c *Client) PaymentsRequestRecurringPayment(ctx context.Context, request *PaymentsRequestRecurringPaymentRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
